#!/usr/bin/env python

import os
import sys
from collections import OrderedDict

from knack import CLI
from knack.commands import CLICommandsLoader, CommandGroup
from knack.arguments import ArgumentsContext
from knack.help import CLIHelp
from knack.help_files import helps
from webbrowser import open

cli_name = os.path.basename(__file__)

helps['find'] = """
    type: group
    short-summary: find opens a search engine and triggers your required query
"""

helps['find google'] = """
    type: command
    short-summary: Find via Google.
    examples:
        - name: Search on browser using google.com
          text: Usage - {cli_name} find google
""".format(cli_name=cli_name)

helps['find bing'] = """
    type: command
    short-summary: Find via Bing.
    examples:
        - name: Search on browser using bing.com
          text: Usage - {cli_name} find bing
""".format(cli_name=cli_name)

def find_google_command_handler(searchtext=None):
    if not searchtext: 
        url = 'https://www.google.com'
    else:
        url = 'https://www.google.com/search?q={query}'.format(query=searchtext)
    return open(url=url)

def find_bing_command_handler(searchtext=None):
    if not searchtext: 
        url = 'https://www.bing.com'
    else:
        url = 'https://www.bing.com/search?q={query}'.format(query=searchtext)
    return open(url=url)

WELCOME_MESSAGE = r"""
Welcome to the find CLI tool which helps you search via commandline!
"""

class MyCLIHelp(CLIHelp):

    def __init__(self, cli_ctx=None):
        super(MyCLIHelp, self).__init__(cli_ctx=cli_ctx,
                                        privacy_statement='My privacy statement.',
                                        welcome_message=WELCOME_MESSAGE)

class MyCommandsLoader(CLICommandsLoader):

    def load_command_table(self, args):
        with CommandGroup(self, 'find', '__main__#{}') as g:
                g.command('google', 'find_google_command_handler')
                g.command('bing', 'find_bing_command_handler')
        return super(MyCommandsLoader, self).load_command_table(args)

    def load_arguments(self, command):
        with ArgumentsContext(self, 'find') as ac:
            ac.argument('searchtext', type=str, default='')
        super(MyCommandsLoader, self).load_arguments(command)

mycli = CLI(cli_name=cli_name,
            config_dir=os.path.join('~', '.{}'.format(cli_name)),
            config_env_var_prefix=cli_name,
            commands_loader_cls=MyCommandsLoader,
            help_cls=MyCLIHelp)
exit_code = mycli.invoke(sys.argv[1:])
sys.exit(exit_code)